y <- c(21341486,
21330825,
20312574,
21340270,
21345839,
21337364,
17309086,
21358552,
21352634,
21335449,
21356439,
21334226,
21337011,
17327858,
21356361,
21332167,
21354220,
20328531,
17321978,
21333580,
21356321,
21352232)
22/5
22/4
22/3
22/6
random_groups <- sample(y, 3, replace = F)
install.packages("randomizr")
library(randomizr)
c(y, block_ra(block_var = y, condition_names = c("group_1", "group_2", "group_3", "group_4", "group_5", "group_6"))
)
for(person in y){
y$group <- sample(1:6, 1, replace = T)
}
"group"=NULL)
groups <- dataframe("person"=c(21341486,
21330825,
20312574,
21340270,
21345839,
21337364,
17309086,
21358552,
21352634,
21335449,
21356439,
21334226,
21337011,
17327858,
21356361,
21332167,
21354220,
20328531,
17321978,
21333580,
21356321,
21352232.
"group"=NULL))
groups <- dataframe("person"=c(21341486,
21330825,
20312574,
21340270,
21345839,
21337364,
17309086,
21358552,
21352634,
21335449,
21356439,
21334226,
21337011,
17327858,
21356361,
21332167,
21354220,
20328531,
17321978,
21333580,
21356321,
21352232),
"group"=NULL)
groups <- data.frame("person"=c(21341486,
21330825,
20312574,
21340270,
21345839,
21337364,
17309086,
21358552,
21352634,
21335449,
21356439,
21334226,
21337011,
17327858,
21356361,
21332167,
21354220,
20328531,
17321978,
21333580,
21356321,
21352232),
"group"=NULL)
groups <- data.frame("person"=c(21341486,
21330825,
20312574,
21340270,
21345839,
21337364,
17309086,
21358552,
21352634,
21335449,
21356439,
21334226,
21337011,
17327858,
21356361,
21332167,
21354220,
20328531,
17321978,
21333580,
21356321,
21352232),
"group"=rep(NA, 22))
View(groups)
for(person in 1:dim(groups)[1]){
groups[person, "group"] <- sample(1:6, 1, replace = T)
}
View(groups)
hist(groups$group)
View(groups)
groups <- data.frame("person"=c(21341486,
21330825,
20312574,
21340270,
21345839,
21337364,
17309086,
21358552,
21352634,
21335449,
21356439,
21334226,
21337011,
17327858,
21356361,
21332167,
21354220,
20328531,
17321978,
21333580,
21356321,
21352232),
"group"=c(5,
2,
1,
2,
5,
4,
6,
6,
2,
4,
6,
5,
1,
2,
1,
1,
5,
4,
6,
3,
3,
3))
View(groups)
hist(groups$group)
df <-read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/expenditure.txt")
View(df)
df <-read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/expenditure.txt")
View(df)
df <-read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/expenditure.txt", header=T)
View(df)
df[,c(2:5)]
plot(df[,c(2:5)])
expenditures <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/expenditure.txt")
View(expenditures)
expenditures <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/expenditure.txt", header=T)
View(expenditures)
expenditures[,c(2:5)]
plot(expenditures[,c(2:5)])
boxplot(expenditures$Region, expenditures$Y)
boxplot(expenditures$Y, expenditures$Region)
boxplot(expenditures$Region)
boxplot(expenditure$Y ̃expenditure$Region, xlab=”Region”, ylab=”Y”, main="”)
boxplot(expenditure$Y~expenditure$Region, xlab=”Region”, ylab=”Y”, main="”)
expenditures <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/expenditure.txt", header=T)
View(expenditures)
expenditures[,c(2:5)]
plot(expenditures[,c(2:5)])
getwd()
pdf("~/Downloads/figure1.pdf")
plot(expenditures[,c(2:5)])
dev.off()
library(car)
data(fruitfly)
data(fruitfly)
library(faraway)
library(faraway)
library("faraway")
install.packages("faraway")
library("faraway")
data(fruitfly)
fruitfly
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv”)
)
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
View(women)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# create matrix to conduct chi-square test
trafficViolations <- matrix(c(14, 6, 7, 7, 7, 1), byrow=T, nrow=2)
trafficViolations
rownames(trafficViolations) <- c("Upper class", "Lower class")
colnames(trafficViolations) <- c("Not stopped", "Bribe", "Stopped/warned")
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
observedValues <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(observedValues)
sumRow <- rowSums(observedValues)
sumCol <- colSums(observedValues)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
v <- function(r, c, n) c * r * (n - r) * (n - c)/n^3
V <- outer(sumRow, sumCol, v, grandSum)
dimnames(expectedValues) <- dimnames(observedValues)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
test_statistic <- sum((abs(table - expectedValues))^2 / expectedValues)
df <- (nrow(observedValues) - 1L) * (ncol(observedValues) - 1L)
p_value <- pchisq(test_statistic, df, lower.tail = FALSE)
adjusted_residuals <- (observedValues - expectedValues)/sqrt(expectedValues * (1-sumRow/grandSum) * (1-sumCol/grandSum))
standardized_residuals <- (observedValues - expectedValues)/sqrt(V)
# return values
return(list(statistic = test_statistic,
df = df,
p.value = p_value,
observed = observedValues,
expected = expectedValues,
adj_res = adjusted_residuals,
std_res = standardized_residuals))
}
byHandChiSquare(table=trafficViolations)
# run chi square test with built in function
chisq.test(trafficViolations)
# use function to extract standardized residuals
chisq.test(trafficViolations)$stdres
# (a) import the data set
library(faraway); data(fruitfly)
# summarize the statistics in the data set
summary(fruitfly)
hist(fruitfly$lifespan, main="", xlab="Lifespan")
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# create matrix to conduct chi-square test
trafficViolations <- matrix(c(14, 6, 7, 7, 7, 1), byrow=T, nrow=2)
rownames(trafficViolations) <- c("Upper class", "Lower class")
colnames(trafficViolations) <- c("Not stopped", "Bribe", "Stopped/warned")
# by hand approach
# create function from chi-square test github.io
byHandChiSquare <- function(table){
# turn into table
observedValues <- as.table(table)
# create sums (row, column, and total)
grandSum <- sum(observedValues)
sumRow <- rowSums(observedValues)
sumCol <- colSums(observedValues)
# calculate expected values for each observation
# check "?outer" to see that this takes the outer product
# of the row and col sum divided by the total sum
expectedValues <- outer(sumRow, sumCol, "*") / grandSum
v <- function(r, c, n) c * r * (n - r) * (n - c)/n^3
V <- outer(sumRow, sumCol, v, grandSum)
dimnames(expectedValues) <- dimnames(observedValues)
# create function that calculates each cell residual variance
# essentially formula on p. 225 in Agresti and Finlay(2009)
test_statistic <- sum((abs(table - expectedValues))^2 / expectedValues)
df <- (nrow(observedValues) - 1L) * (ncol(observedValues) - 1L)
p_value <- pchisq(test_statistic, df, lower.tail = FALSE)
adjusted_residuals <- (observedValues - expectedValues)/sqrt(expectedValues * (1-sumRow/grandSum) * (1-sumCol/grandSum))
standardized_residuals <- (observedValues - expectedValues)/sqrt(V)
# return values
return(list(statistic = test_statistic,
df = df,
p.value = p_value,
observed = observedValues,
expected = expectedValues,
adj_res = adjusted_residuals,
std_res = standardized_residuals))
}
byHandChiSquare(table=trafficViolations)
# run chi square test with built in function
chisq.test(trafficViolations)
# use function to extract standardized residuals
chisq.test(trafficViolations)$stdres
# read in women data from online .csv
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# run regression model with water regressed on whether there are reserved seats for women
regression_model_problem2 <- lm(water ~ reserved, data=women)
# get summary of model with coefficient estimates
summary(regression_model_problem2)
# (a) import the data set
library(faraway); data(fruitfly)
# summarize the statistics in the data set
summary(fruitfly)
hist(fruitfly$lifespan, main="", xlab="Lifespan")
# (a) import the data set
fruitfly <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/fruitfly.csv")
# summarize the statistics in the data set
summary(fruitfly)
hist(fruitfly$lifespan, main="", xlab="Lifespan")
plot(fruitfly$thorax, fruitfly$lifespan,
xlab = "Length of Thorax (mm)", ylab = "Lifespan (days)")
# calculate correlation coefficient between lifespan and thorax
cor(fruitfly$thorax,fruitfly$lifespan)
# (c) # Run the regression of lifespan on thorax
regression_model_problem3 <- lm(lifespan ~ thorax, data=fruitfly)
# get summary statistics for linear regression model
summary(regression_model_problem3)
# (e) calculate the confidence interval by formula
pointEst <- 144.33
se <- 15.77
# get the t-score
t <- qt(0.95,25*5-2)
# create the upper and lower bounds
lower_CI <- pointEst - t*se
upper_CI <- pointEst + t*se
# now try confint
confint(regression_model_problem3, "thorax", level = 0.9)
# (f) prediction
# store the two variables in x and y
x <- fruitfly$thorax
y <- fruitfly$lifespan
# predict() function to predict an individual fruitfly lifespan
predict(lm(y~x), newdata = data.frame(x=0.8), interval = "prediction", level = 0.90)
# predict() function to predict the average lifespan of fruitflies
predict(lm(y~x), newdata = data.frame(x=0.8), interval = "confidence", level = 0.90)
# (g) create plot of confidence and prediction intervals
# find fitted values and prediction and confidence intervals
# going from .64 to .94 since these are the max and min values of thorax
prep.a <- predict(lm(y~x), newdata = seq(min(x), max(x), 0.003),  interval = "confidence")
# (g) create plot of confidence and prediction intervals
# find fitted values and prediction and confidence intervals
# going from .64 to .94 since these are the max and min values of thorax
prep.a <- predict(lm(y~x), newdata = data.frame(x=seq(min(x), max(x), 0.003)),  interval = "confidence")
prep.i <- predict(lm(y~x), newdata = data.frame(x=seq(min(x), max(x), 0.003)),  interval = "prediction")
matplot(newSeq$x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("black", "blue", "green", "red", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
matplot(x, cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("black", "blue", "green", "red", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
cbind(prep.a, prep.i[,-1])
x
length(x)
matplot(seq(min(x), max(x), 0.003), cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("black", "blue", "green", "red", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
matplot(seq(min(x), max(x), 0.003), cbind(prep.a, prep.i[,-1]), lty = c(1,2,2,3,3), type = "l",
col = c("black", "blue", "green", "red", "purple"),
xlab = "Length of Thorax (mm)", ylab = "Fitted Value of Lifespan (days)")
# Add a legend to the plot to show which line represents which value
legend("topleft", legend = c("Fitted Value", "Lower Bound for Confidence Interval",
"Upper Bound for Confidence Interval", "Lower Bound for Prediction Interval",
"Upper Bound for Prediction Interval"), lty = c(1,2,2,3,3),
col = c("black", "blue", "green", "red", "purple"), cex = 0.85)
# read in women data from online .csv
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# run regression model with water regressed on whether there are reserved seats for women
regression_model_problem2 <- lm(water ~ reserved, data=women)
# get summary of model with coefficient estimates
summary(regression_model_problem2)
list(texreg(regression_model_problem2))
library(texreg)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("texreg"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read in women data from online .csv
women <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
# run regression model with water regressed on whether there are reserved seats for women
regression_model_problem2 <- lm(water ~ reserved, data=women)
# get summary of model with coefficient estimates
summary(regression_model_problem2)
list(texreg(regression_model_problem2))
# get summary of model with coefficient estimates
summary(regression_model_problem2)
names(women)
ex2 <- lm(water ~ reserved + female, data=women)
list(texreg(regression_model_problem2, ex2))
# run regression model with water regressed on whether there are reserved seats for women
regression_model_problem2 <- lm(water ~ reserved, data=women)
ex2 <- lm(water ~ reserved + female, data=women)
# get summary of model with coefficient estimates
summary(regression_model_problem2)
list(texreg(regression_model_problem2, ex2))
list(regression_model_problem2, ex2))
list(regression_model_problem2, ex2)
texreg(list(regression_model_problem2, ex2))
# (a) import the data set
fruitfly <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2021/main/datasets/fruitfly.csv")
# summarize the statistics in the data set
summary(fruitfly)
# show the distribution of the overall lifespan of the fruitflies
pdf("plot3_a.pdf")
hist(fruitfly$lifespan, main="", xlab="Lifespan")
dev.off()
getwd()
dev.off()
hist(fruitfly$lifespan, main="", xlab="Lifespan")
